pipeline
{
    agent any

    stages
    {
        stage ('Pull artifacts from github repository')
        {
            steps
            {
                git branch: 'main', url: 'https://github.com/AWSRJ/ec2_maven_02'
            }
        }

        stage ('Clean the previous build')
        {
            steps
            {
                withMaven(jdk: 'java_home', maven: 'maven_home')
                {
                    sh "mvn clean"
                }
            }
        }

        stage ('Compile the artifacts')
        {
            steps
            {
                withMaven(jdk: 'java_home', maven: 'maven_home')
                {
                    sh "mvn compile"
                }
            }
        }

        stage ('Test the artifacts')
        {
            steps
            {
                withMaven(jdk: 'java_home', maven: 'maven_home')
                {
                    sh "mvn test"
                }
            }
        }

        stage ('Build the package')
        {
            steps
            {
                withMaven(jdk: 'java_home', maven: 'maven_home')
                {
                    sh "mvn package"
                }
            }
        }

        stage ('Check application file')
        {
            environment
            {
                appl_file = fileExists '/var/lib/jenkins/workspace/Maven_HelloWorld_Project/target/MavenHelloWorldProject-1.0-SNAPSHOT.jar'
            }
            stages
            {
                stage('Execute application file if exists')
                {
                    when { expression { appl_file == 'true' } }
                    steps
                    {
                        sh 'java -cp target/MavenHelloWorldProject-1.0-SNAPSHOT.jar com.example.maven.App > index.html'
                    }
                }
                stage('Notify if application file do not exists')
                {
                    when { expression { appl_file == 'false' } }
                    steps
                    {
                        sh 'echo Application file MavenHelloWorldProject-1.0-SNAPSHOT.jar not found > index.html'
                    }
                }
            }
        }

        stage ('Deploy the package to tomcat server private IP 172.31.52.131')
        {
            steps
            {
                sshagent(credentials: ['cicd_pipeline_Jenkins_to_Tomcat'])
                {
                    sh 'scp -o StrictHostKeyChecking=no /var/lib/jenkins/workspace/Maven_HelloWorld_Pipeline_01/index.html ec2-user@172.31.52.131:/var/lib/tomcat/webapps/myapp'
                }
            }
        }

        stage ('Verification of code deployment on tomcat server')
        {
            stages
            {
                stage('...Connecting to tomcat server')
                {
                    steps
                    {
                        script
                        {
                            // 1. Execute ssh-keygen on Jenkins server to generate the public and private key
                            // 2. Copy public key from '/home/ec2-user/.ssh/id_rsa.pub' on Jenkins server
                            // 3. Paste public key in '/home/ec2-user/.ssh/authorized_keys' on Tomcat server
                            // 4. Go to Jenkins URL -> credentials -> Add Credential
                            // 5. Select 'SSH user private key' and Paste Private key given in
                            //    '/home/ec2-user/.ssh/id_rsa' file.
                            withCredentials([sshUserPrivateKey(credentialsId: 'cicd_pipeline_connect_to_tomcat',
                                                            keyFileVariable: 'identity', passphraseVariable: '',
                                                            usernameVariable: 'userName')])
                            {
                                def remote = [:]
                                remote.name = 'tomcat'
                                remote.host = '172.31.52.131'
                                remote.allowAnyHosts = true
                                remote.user = userName
                                remote.identityFile = identity
                                stage('...Checking application file on tomcat server')
                                {
                                    sshCommand remote: remote, command: 'ls -lrt /var/lib/tomcat/webapps/myapp/'
                                    sshCommand remote: remote,
                                            command: "([[ -f /var/lib/tomcat/webapps/myapp/index.html ]] && \
                                                        echo 'found' || echo 'not found') > /var/lib/tomcat/webapps/myapp/output.txt"
                                    sshGet remote: remote, from: '/var/lib/tomcat/webapps/myapp/output.txt',
                                                        into: '/var/lib/jenkins/workspace/Maven_HelloWorld_Pipeline_01/output.txt', 
                                                        override: true
                                }
                            }
                        }
                    }
                }

                stage('...Checking return code from tomcat server')
                {
                    script
                    {
                        def fileData = readFile(file: '/var/lib/tomcat/webapps/myapp/output.txt')
                    }
                    when { expression { fileData == 'found' } }
                    steps
                    {
                        script
                        {
                            if (fileData == 'found')
                            {
                                echo 'Application file successfully deployed on tomcat server'
                            }
                            else
                            {
                                echo 'Application file failed to deploy on tomcat server'
                            }
                        }
                    }
                }
            }
        }
    }
}
